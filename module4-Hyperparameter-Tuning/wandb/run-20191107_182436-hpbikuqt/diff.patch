diff --git a/module3-Intro-to-Keras/LS_DS_423_Keras_Assignment.ipynb b/module3-Intro-to-Keras/LS_DS_423_Keras_Assignment.ipynb
index b98d1c1..54e10db 100644
--- a/module3-Intro-to-Keras/LS_DS_423_Keras_Assignment.ipynb
+++ b/module3-Intro-to-Keras/LS_DS_423_Keras_Assignment.ipynb
@@ -786,6 +786,29 @@
     "print(f'{mnist_model.metrics_names[1]}: {scores[1]*100}')"
    ]
   },
+  {
+   "cell_type": "code",
+   "execution_count": 41,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "image/png": "\n",
+      "text/plain": [
+       "<Figure size 432x288 with 1 Axes>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "import seaborn as sns\n",
+    "import matplotlib.style as style\n",
+    "style.use('fivethirtyeight')\n",
+    "sns.lineplot(x=history.history['loss'], y=history.history['accuracy']);"
+   ]
+  },
   {
    "cell_type": "markdown",
    "metadata": {
diff --git a/module4-Hyperparameter-Tuning/LS_DS_424_Hyperparameter_Tuning_Lecture.ipynb b/module4-Hyperparameter-Tuning/LS_DS_424_Hyperparameter_Tuning_Lecture.ipynb
index c1a577d..09ae3be 100644
--- a/module4-Hyperparameter-Tuning/LS_DS_424_Hyperparameter_Tuning_Lecture.ipynb
+++ b/module4-Hyperparameter-Tuning/LS_DS_424_Hyperparameter_Tuning_Lecture.ipynb
@@ -71,7 +71,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 8,
+   "execution_count": 1,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -96,7 +96,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 14,
+   "execution_count": 2,
    "metadata": {
     "colab": {
      "base_uri": "https://localhost:8080/",
@@ -111,33 +111,48 @@
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "[[-0.41978194  0.28482986 -1.2879095  ... -1.45900038  0.44105193\n",
-      "  -1.0755623 ]\n",
-      " [-0.41733926 -0.48772236 -0.59338101 ... -0.30309415  0.44105193\n",
-      "  -0.49243937]\n",
-      " [-0.41734159 -0.48772236 -0.59338101 ... -0.30309415  0.39642699\n",
-      "  -1.2087274 ]\n",
-      " ...\n",
-      " [-0.41344658 -0.48772236  0.11573841 ...  1.17646583  0.44105193\n",
-      "  -0.98304761]\n",
-      " [-0.40776407 -0.48772236  0.11573841 ...  1.17646583  0.4032249\n",
-      "  -0.86530163]\n",
-      " [-0.41500016 -0.48772236  0.11573841 ...  1.17646583  0.44105193\n",
-      "  -0.66905833]]\n"
+      "[[-0.27224633 -0.48361547 -0.43576161 -0.25683275 -0.1652266  -0.1764426\n",
+      "   0.81306188  0.1166983  -0.62624905 -0.59517003  1.14850044  0.44807713\n",
+      "   0.8252202 ]\n",
+      " [-0.40342651  2.99178419 -1.33391162 -0.25683275 -1.21518188  1.89434613\n",
+      "  -1.91036058  1.24758524 -0.85646254 -0.34843254 -1.71818909  0.43190599\n",
+      "  -1.32920239]\n",
+      " [ 0.1249402  -0.48361547  1.0283258  -0.25683275  0.62864202 -1.82968811\n",
+      "   1.11048828 -1.18743907  1.67588577  1.5652875   0.78447637  0.22061726\n",
+      "  -1.30850006]\n",
+      " [-0.40149354 -0.48361547 -0.86940196 -0.25683275 -0.3615597  -0.3245576\n",
+      "  -1.23667187  1.10717989 -0.51114231 -1.094663    0.78447637  0.44807713\n",
+      "  -0.65292624]\n",
+      " [-0.0056343  -0.48361547  1.0283258  -0.25683275  1.32861221  0.15364225\n",
+      "   0.69480801 -0.57857203  1.67588577  1.5652875   0.78447637  0.3898823\n",
+      "   0.26349695]\n",
+      " [-0.37502238 -0.48361547 -0.54747912 -0.25683275 -0.54935658 -0.78865126\n",
+      "   0.18954148  0.48371503 -0.51114231 -0.71552978  0.51145832  0.38669063\n",
+      "  -0.13812828]\n",
+      " [ 0.58963463 -0.48361547  1.0283258  -0.25683275  1.21764133 -1.03127774\n",
+      "   1.11048828 -1.06518235  1.67588577  1.5652875   0.78447637  0.44807713\n",
+      "   1.49873604]\n",
+      " [ 0.0381708  -0.48361547  1.24588095 -0.25683275  2.67733525 -1.12719983\n",
+      "   1.11048828 -1.14833073 -0.51114231 -0.01744323 -1.71818909  0.44807713\n",
+      "   1.88793986]\n",
+      " [-0.17228416 -0.48361547  1.24588095 -0.25683275  2.67733525 -0.90150078\n",
+      "   1.11048828 -1.09664657 -0.51114231 -0.01744323 -1.71818909 -1.97365769\n",
+      "   0.53952803]\n",
+      " [-0.22932104 -0.48361547  1.58544339 -0.25683275  0.56888847 -1.76056777\n",
+      "   1.11048828 -1.13471925 -0.62624905  0.18716835  1.23950646  0.44807713\n",
+      "   2.99068404]]\n"
      ]
     }
    ],
    "source": [
     "from sklearn.preprocessing import StandardScaler\n",
     "\n",
-    "# Split into X and y and turn into numpy arays\n",
-    "y = df.MEDV.values\n",
-    "X = df.drop(\"MEDV\", axis='columns').values\n",
-    "\n",
     "# Scale input data\n",
     "scaler = StandardScaler()\n",
-    "X = scaler.fit_transform(X)\n",
-    "print(X)"
+    "\n",
+    "x_train = scaler.fit_transform(x_train)\n",
+    "x_test = scaler.transform(x_test)\n",
+    "print(x_train[:10])"
    ]
   },
   {
@@ -154,7 +169,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 9,
+   "execution_count": 3,
    "metadata": {
     "colab": {
      "base_uri": "https://localhost:8080/",
@@ -165,13 +180,170 @@
     "outputId": "b05e251e-508f-46e6-865b-f869ae2a5dc4"
    },
    "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Train on 404 samples, validate on 102 samples\n",
+      "Epoch 1/75\n",
+      "404/404 [==============================] - 1s 3ms/sample - loss: 515.2334 - mse: 515.2333 - mae: 20.6325 - val_loss: 437.3017 - val_mse: 437.3017 - val_mae: 18.6839\n",
+      "Epoch 2/75\n",
+      "404/404 [==============================] - 0s 223us/sample - loss: 273.5330 - mse: 273.5330 - mae: 13.6160 - val_loss: 134.3315 - val_mse: 134.3315 - val_mae: 9.5749\n",
+      "Epoch 3/75\n",
+      "404/404 [==============================] - 0s 231us/sample - loss: 77.2441 - mse: 77.2441 - mae: 6.6099 - val_loss: 53.2456 - val_mse: 53.2456 - val_mae: 5.5439\n",
+      "Epoch 4/75\n",
+      "404/404 [==============================] - 0s 216us/sample - loss: 36.9611 - mse: 36.9611 - mae: 4.4770 - val_loss: 31.8715 - val_mse: 31.8715 - val_mae: 4.4196\n",
+      "Epoch 5/75\n",
+      "404/404 [==============================] - 0s 224us/sample - loss: 24.2132 - mse: 24.2132 - mae: 3.5983 - val_loss: 25.0459 - val_mse: 25.0459 - val_mae: 4.0000\n",
+      "Epoch 6/75\n",
+      "404/404 [==============================] - 0s 240us/sample - loss: 19.4862 - mse: 19.4862 - mae: 3.1634 - val_loss: 22.4214 - val_mse: 22.4214 - val_mae: 3.7533\n",
+      "Epoch 7/75\n",
+      "404/404 [==============================] - 0s 231us/sample - loss: 17.5103 - mse: 17.5103 - mae: 3.0018 - val_loss: 22.2501 - val_mse: 22.2501 - val_mae: 3.6671\n",
+      "Epoch 8/75\n",
+      "404/404 [==============================] - 0s 224us/sample - loss: 15.8857 - mse: 15.8857 - mae: 2.8786 - val_loss: 21.5192 - val_mse: 21.5192 - val_mae: 3.5319\n",
+      "Epoch 9/75\n",
+      "404/404 [==============================] - 0s 208us/sample - loss: 14.9545 - mse: 14.9545 - mae: 2.7676 - val_loss: 21.6990 - val_mse: 21.6990 - val_mae: 3.5095\n",
+      "Epoch 10/75\n",
+      "404/404 [==============================] - 0s 224us/sample - loss: 13.9414 - mse: 13.9414 - mae: 2.6780 - val_loss: 20.8370 - val_mse: 20.8370 - val_mae: 3.4670\n",
+      "Epoch 11/75\n",
+      "404/404 [==============================] - 0s 217us/sample - loss: 13.2270 - mse: 13.2270 - mae: 2.6057 - val_loss: 21.3335 - val_mse: 21.3335 - val_mae: 3.4475\n",
+      "Epoch 12/75\n",
+      "404/404 [==============================] - 0s 222us/sample - loss: 12.7282 - mse: 12.7282 - mae: 2.5698 - val_loss: 20.7473 - val_mse: 20.7473 - val_mae: 3.3393\n",
+      "Epoch 13/75\n",
+      "404/404 [==============================] - 0s 205us/sample - loss: 12.0392 - mse: 12.0392 - mae: 2.5303 - val_loss: 20.4038 - val_mse: 20.4038 - val_mae: 3.2935\n",
+      "Epoch 14/75\n",
+      "404/404 [==============================] - 0s 228us/sample - loss: 11.8870 - mse: 11.8870 - mae: 2.4770 - val_loss: 21.1113 - val_mse: 21.1113 - val_mae: 3.3154\n",
+      "Epoch 15/75\n",
+      "404/404 [==============================] - 0s 216us/sample - loss: 11.2044 - mse: 11.2044 - mae: 2.4076 - val_loss: 20.4151 - val_mse: 20.4151 - val_mae: 3.2440\n",
+      "Epoch 16/75\n",
+      "404/404 [==============================] - 0s 220us/sample - loss: 10.6287 - mse: 10.6287 - mae: 2.3497 - val_loss: 20.9375 - val_mse: 20.9375 - val_mae: 3.2469\n",
+      "Epoch 17/75\n",
+      "404/404 [==============================] - 0s 222us/sample - loss: 10.3380 - mse: 10.3380 - mae: 2.3294 - val_loss: 19.8404 - val_mse: 19.8404 - val_mae: 3.1379\n",
+      "Epoch 18/75\n",
+      "404/404 [==============================] - 0s 217us/sample - loss: 10.2500 - mse: 10.2500 - mae: 2.3156 - val_loss: 20.3840 - val_mse: 20.3840 - val_mae: 3.1781\n",
+      "Epoch 19/75\n",
+      "404/404 [==============================] - 0s 221us/sample - loss: 9.9157 - mse: 9.9157 - mae: 2.2627 - val_loss: 19.2487 - val_mse: 19.2487 - val_mae: 3.0767\n",
+      "Epoch 20/75\n",
+      "404/404 [==============================] - 0s 318us/sample - loss: 9.6363 - mse: 9.6363 - mae: 2.2582 - val_loss: 20.8970 - val_mse: 20.8970 - val_mae: 3.1589\n",
+      "Epoch 21/75\n",
+      "404/404 [==============================] - 0s 242us/sample - loss: 9.8447 - mse: 9.8447 - mae: 2.2300 - val_loss: 19.4231 - val_mse: 19.4231 - val_mae: 3.0654\n",
+      "Epoch 22/75\n",
+      "404/404 [==============================] - 0s 248us/sample - loss: 9.4939 - mse: 9.4939 - mae: 2.2505 - val_loss: 20.0414 - val_mse: 20.0414 - val_mae: 3.0661\n",
+      "Epoch 23/75\n",
+      "404/404 [==============================] - 0s 236us/sample - loss: 9.3652 - mse: 9.3652 - mae: 2.1994 - val_loss: 20.5244 - val_mse: 20.5244 - val_mae: 3.1168\n",
+      "Epoch 24/75\n",
+      "404/404 [==============================] - 0s 249us/sample - loss: 9.1550 - mse: 9.1550 - mae: 2.1844 - val_loss: 20.8373 - val_mse: 20.8373 - val_mae: 3.1516\n",
+      "Epoch 25/75\n",
+      "404/404 [==============================] - 0s 245us/sample - loss: 8.9705 - mse: 8.9705 - mae: 2.1370 - val_loss: 19.8517 - val_mse: 19.8517 - val_mae: 3.1065\n",
+      "Epoch 26/75\n",
+      "404/404 [==============================] - 0s 238us/sample - loss: 8.9249 - mse: 8.9249 - mae: 2.1446 - val_loss: 19.2911 - val_mse: 19.2911 - val_mae: 2.9834\n",
+      "Epoch 27/75\n",
+      "404/404 [==============================] - 0s 252us/sample - loss: 8.7900 - mse: 8.7900 - mae: 2.1381 - val_loss: 18.7780 - val_mse: 18.7780 - val_mae: 2.9400\n",
+      "Epoch 28/75\n",
+      "404/404 [==============================] - 0s 247us/sample - loss: 8.7533 - mse: 8.7533 - mae: 2.1154 - val_loss: 20.9524 - val_mse: 20.9524 - val_mae: 3.1398\n",
+      "Epoch 29/75\n",
+      "404/404 [==============================] - 0s 244us/sample - loss: 8.5683 - mse: 8.5683 - mae: 2.1172 - val_loss: 19.5367 - val_mse: 19.5367 - val_mae: 2.9864\n",
+      "Epoch 30/75\n",
+      "404/404 [==============================] - 0s 247us/sample - loss: 8.4288 - mse: 8.4288 - mae: 2.1020 - val_loss: 20.0785 - val_mse: 20.0785 - val_mae: 2.9767\n",
+      "Epoch 31/75\n",
+      "404/404 [==============================] - 0s 255us/sample - loss: 8.4775 - mse: 8.4775 - mae: 2.0715 - val_loss: 19.5191 - val_mse: 19.5191 - val_mae: 2.9304\n",
+      "Epoch 32/75\n",
+      "404/404 [==============================] - 0s 254us/sample - loss: 8.2087 - mse: 8.2087 - mae: 2.0385 - val_loss: 20.1108 - val_mse: 20.1108 - val_mae: 3.0020\n",
+      "Epoch 33/75\n",
+      "404/404 [==============================] - 0s 254us/sample - loss: 8.3249 - mse: 8.3249 - mae: 2.0866 - val_loss: 19.2314 - val_mse: 19.2314 - val_mae: 2.9787\n",
+      "Epoch 34/75\n",
+      "404/404 [==============================] - 0s 245us/sample - loss: 8.5089 - mse: 8.5089 - mae: 2.0984 - val_loss: 18.6740 - val_mse: 18.6740 - val_mae: 2.8703\n",
+      "Epoch 35/75\n",
+      "404/404 [==============================] - 0s 266us/sample - loss: 7.8828 - mse: 7.8828 - mae: 2.0021 - val_loss: 18.1984 - val_mse: 18.1984 - val_mae: 2.8704\n",
+      "Epoch 36/75\n",
+      "404/404 [==============================] - 0s 256us/sample - loss: 8.0209 - mse: 8.0209 - mae: 2.0424 - val_loss: 18.3274 - val_mse: 18.3274 - val_mae: 2.8324\n",
+      "Epoch 37/75\n",
+      "404/404 [==============================] - 0s 249us/sample - loss: 8.0256 - mse: 8.0256 - mae: 2.0239 - val_loss: 17.5685 - val_mse: 17.5685 - val_mae: 2.8253\n",
+      "Epoch 38/75\n",
+      "404/404 [==============================] - 0s 234us/sample - loss: 7.7329 - mse: 7.7329 - mae: 1.9780 - val_loss: 18.0638 - val_mse: 18.0638 - val_mae: 2.8086\n",
+      "Epoch 39/75\n",
+      "404/404 [==============================] - 0s 232us/sample - loss: 7.6564 - mse: 7.6564 - mae: 1.9854 - val_loss: 17.9088 - val_mse: 17.9088 - val_mae: 2.8053\n",
+      "Epoch 40/75\n",
+      "404/404 [==============================] - 0s 239us/sample - loss: 7.5431 - mse: 7.5431 - mae: 1.9668 - val_loss: 19.0797 - val_mse: 19.0797 - val_mae: 2.9534\n",
+      "Epoch 41/75\n",
+      "404/404 [==============================] - 0s 241us/sample - loss: 7.5963 - mse: 7.5963 - mae: 1.9362 - val_loss: 19.2375 - val_mse: 19.2375 - val_mae: 2.9725\n",
+      "Epoch 42/75\n",
+      "404/404 [==============================] - 0s 231us/sample - loss: 7.4908 - mse: 7.4908 - mae: 1.9735 - val_loss: 18.4784 - val_mse: 18.4784 - val_mae: 2.8208\n",
+      "Epoch 43/75\n",
+      "404/404 [==============================] - 0s 226us/sample - loss: 7.3721 - mse: 7.3721 - mae: 1.9388 - val_loss: 18.8243 - val_mse: 18.8243 - val_mae: 2.8598\n",
+      "Epoch 44/75\n",
+      "404/404 [==============================] - 0s 222us/sample - loss: 7.1434 - mse: 7.1434 - mae: 1.9206 - val_loss: 19.4507 - val_mse: 19.4507 - val_mae: 2.9707\n",
+      "Epoch 45/75\n",
+      "404/404 [==============================] - 0s 231us/sample - loss: 7.1601 - mse: 7.1601 - mae: 1.8988 - val_loss: 17.7180 - val_mse: 17.7180 - val_mae: 2.7766\n",
+      "Epoch 46/75\n",
+      "404/404 [==============================] - 0s 230us/sample - loss: 7.0243 - mse: 7.0243 - mae: 1.9144 - val_loss: 17.4651 - val_mse: 17.4651 - val_mae: 2.7526\n",
+      "Epoch 47/75\n",
+      "404/404 [==============================] - 0s 245us/sample - loss: 7.1432 - mse: 7.1432 - mae: 1.9272 - val_loss: 18.1771 - val_mse: 18.1771 - val_mae: 2.8583\n",
+      "Epoch 48/75\n",
+      "404/404 [==============================] - 0s 214us/sample - loss: 7.0976 - mse: 7.0976 - mae: 1.9091 - val_loss: 17.2489 - val_mse: 17.2489 - val_mae: 2.7248\n",
+      "Epoch 49/75\n",
+      "404/404 [==============================] - 0s 219us/sample - loss: 6.8903 - mse: 6.8903 - mae: 1.8772 - val_loss: 18.3993 - val_mse: 18.3993 - val_mae: 2.8030\n",
+      "Epoch 50/75\n",
+      "404/404 [==============================] - 0s 228us/sample - loss: 6.6525 - mse: 6.6525 - mae: 1.8609 - val_loss: 18.2852 - val_mse: 18.2852 - val_mae: 3.0086\n",
+      "Epoch 51/75\n",
+      "404/404 [==============================] - 0s 229us/sample - loss: 6.7569 - mse: 6.7569 - mae: 1.8727 - val_loss: 18.5453 - val_mse: 18.5453 - val_mae: 2.9037\n",
+      "Epoch 52/75\n",
+      "404/404 [==============================] - 0s 227us/sample - loss: 6.5685 - mse: 6.5685 - mae: 1.8624 - val_loss: 17.4937 - val_mse: 17.4937 - val_mae: 2.9701\n",
+      "Epoch 53/75\n",
+      "404/404 [==============================] - 0s 227us/sample - loss: 7.0141 - mse: 7.0141 - mae: 1.9295 - val_loss: 17.2908 - val_mse: 17.2908 - val_mae: 2.7980\n",
+      "Epoch 54/75\n",
+      "404/404 [==============================] - 0s 236us/sample - loss: 6.4418 - mse: 6.4418 - mae: 1.8234 - val_loss: 17.9035 - val_mse: 17.9035 - val_mae: 2.8036\n",
+      "Epoch 55/75\n",
+      "404/404 [==============================] - 0s 245us/sample - loss: 6.5280 - mse: 6.5280 - mae: 1.8220 - val_loss: 17.7421 - val_mse: 17.7421 - val_mae: 2.7178\n",
+      "Epoch 56/75\n",
+      "404/404 [==============================] - 0s 222us/sample - loss: 6.2773 - mse: 6.2773 - mae: 1.7922 - val_loss: 17.8618 - val_mse: 17.8618 - val_mae: 2.9256\n",
+      "Epoch 57/75\n",
+      "404/404 [==============================] - 0s 229us/sample - loss: 6.3746 - mse: 6.3746 - mae: 1.8268 - val_loss: 17.5997 - val_mse: 17.5997 - val_mae: 2.7500\n",
+      "Epoch 58/75\n",
+      "404/404 [==============================] - 0s 231us/sample - loss: 6.3312 - mse: 6.3312 - mae: 1.8126 - val_loss: 15.8775 - val_mse: 15.8775 - val_mae: 2.6386\n",
+      "Epoch 59/75\n",
+      "404/404 [==============================] - 0s 223us/sample - loss: 6.1635 - mse: 6.1635 - mae: 1.7770 - val_loss: 16.2599 - val_mse: 16.2599 - val_mae: 2.7459\n",
+      "Epoch 60/75\n",
+      "404/404 [==============================] - 0s 220us/sample - loss: 6.0802 - mse: 6.0802 - mae: 1.7784 - val_loss: 16.4696 - val_mse: 16.4696 - val_mae: 2.6506\n",
+      "Epoch 61/75\n",
+      "404/404 [==============================] - 0s 217us/sample - loss: 6.0911 - mse: 6.0911 - mae: 1.7603 - val_loss: 17.0114 - val_mse: 17.0114 - val_mae: 2.7476\n",
+      "Epoch 62/75\n",
+      "404/404 [==============================] - 0s 233us/sample - loss: 5.9854 - mse: 5.9854 - mae: 1.7555 - val_loss: 17.7638 - val_mse: 17.7638 - val_mae: 2.7969\n",
+      "Epoch 63/75\n",
+      "404/404 [==============================] - 0s 222us/sample - loss: 5.8680 - mse: 5.8680 - mae: 1.7396 - val_loss: 16.3979 - val_mse: 16.3979 - val_mae: 2.6254\n",
+      "Epoch 64/75\n",
+      "404/404 [==============================] - 0s 231us/sample - loss: 5.8119 - mse: 5.8119 - mae: 1.7203 - val_loss: 16.6613 - val_mse: 16.6613 - val_mae: 2.7292\n",
+      "Epoch 65/75\n",
+      "404/404 [==============================] - 0s 228us/sample - loss: 5.5976 - mse: 5.5976 - mae: 1.7208 - val_loss: 15.2832 - val_mse: 15.2832 - val_mae: 2.6544\n",
+      "Epoch 66/75\n",
+      "404/404 [==============================] - 0s 226us/sample - loss: 5.9567 - mse: 5.9567 - mae: 1.7483 - val_loss: 16.6116 - val_mse: 16.6116 - val_mae: 2.7007\n",
+      "Epoch 67/75\n",
+      "404/404 [==============================] - 0s 239us/sample - loss: 5.6044 - mse: 5.6044 - mae: 1.7002 - val_loss: 16.1416 - val_mse: 16.1416 - val_mae: 2.6832\n",
+      "Epoch 68/75\n",
+      "404/404 [==============================] - 0s 240us/sample - loss: 5.6470 - mse: 5.6470 - mae: 1.7120 - val_loss: 14.8036 - val_mse: 14.8036 - val_mae: 2.5773\n",
+      "Epoch 69/75\n",
+      "404/404 [==============================] - 0s 243us/sample - loss: 5.5909 - mse: 5.5909 - mae: 1.6974 - val_loss: 15.8673 - val_mse: 15.8673 - val_mae: 2.7299\n",
+      "Epoch 70/75\n",
+      "404/404 [==============================] - 0s 218us/sample - loss: 5.4557 - mse: 5.4557 - mae: 1.6580 - val_loss: 15.1260 - val_mse: 15.1260 - val_mae: 2.6215\n",
+      "Epoch 71/75\n",
+      "404/404 [==============================] - 0s 225us/sample - loss: 5.3122 - mse: 5.3122 - mae: 1.6547 - val_loss: 16.3377 - val_mse: 16.3377 - val_mae: 2.7829\n",
+      "Epoch 72/75\n",
+      "404/404 [==============================] - 0s 225us/sample - loss: 5.3892 - mse: 5.3892 - mae: 1.6647 - val_loss: 15.4660 - val_mse: 15.4660 - val_mae: 2.6441\n",
+      "Epoch 73/75\n",
+      "404/404 [==============================] - 0s 240us/sample - loss: 5.3549 - mse: 5.3549 - mae: 1.6676 - val_loss: 14.7673 - val_mse: 14.7673 - val_mae: 2.5636\n",
+      "Epoch 74/75\n",
+      "404/404 [==============================] - 0s 227us/sample - loss: 5.4493 - mse: 5.4493 - mae: 1.6692 - val_loss: 14.9627 - val_mse: 14.9627 - val_mae: 2.6522\n",
+      "Epoch 75/75\n",
+      "404/404 [==============================] - 0s 235us/sample - loss: 5.5834 - mse: 5.5834 - mae: 1.7036 - val_loss: 14.8658 - val_mse: 14.8658 - val_mae: 2.5988\n"
+     ]
+    },
     {
      "data": {
       "text/plain": [
-       "<tensorflow.python.keras.callbacks.History at 0x7f4f806265c0>"
+       "<tensorflow.python.keras.callbacks.History at 0x7f7de05f6b38>"
       ]
      },
-     "execution_count": 9,
+     "execution_count": 3,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -183,7 +355,7 @@
     "\n",
     "# Important Hyperparameters\n",
     "inputs = x_train.shape[1]\n",
-    "epochs = 50\n",
+    "epochs = 75\n",
     "batch_size = 10\n",
     "\n",
     "\n",
@@ -193,15 +365,14 @@
     "model.add(Dense(64, activation='relu'))\n",
     "model.add(Dense(1))\n",
     "# Compile Model\n",
-    "model.compile(optimizer='adam', loss='mse', metrics=['mse'])\n",
+    "model.compile(optimizer='adam', loss='mse', metrics=['mse', 'mae'])\n",
     "\n",
     "# Fit Model\n",
     "\n",
     "model.fit(x_train, y_train, \n",
     "          validation_data=(x_test,y_test), \n",
     "          epochs=epochs, \n",
-    "          batch_size=epochs,\n",
-    "          verbose=False\n",
+    "          batch_size=batch_size\n",
     "         )"
    ]
   },
@@ -277,7 +448,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 11,
+   "execution_count": 5,
    "metadata": {
     "colab": {
      "base_uri": "https://localhost:8080/",
@@ -288,22 +459,31 @@
     "outputId": "ae996575-78e2-43fb-9dbe-5d44aaf0b430"
    },
    "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
+      "  warnings.warn(CV_WARNING, FutureWarning)\n"
+     ]
+    },
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Best: 0.6692708333333334 using {'batch_size': 10, 'epochs': 20}\n",
-      "Means: 0.6692708333333334, Stdev: 0.01813592223591682 with: {'batch_size': 10, 'epochs': 20}\n",
-      "Means: 0.6145833333333334, Stdev: 0.036966326996297885 with: {'batch_size': 20, 'epochs': 20}\n",
-      "Means: 0.5638020833333334, Stdev: 0.03097754493065187 with: {'batch_size': 40, 'epochs': 20}\n",
-      "Means: 0.5885416666666666, Stdev: 0.031304206458779446 with: {'batch_size': 60, 'epochs': 20}\n",
-      "Means: 0.5143229166666666, Stdev: 0.045591514062530196 with: {'batch_size': 80, 'epochs': 20}\n",
-      "Means: 0.5651041666666666, Stdev: 0.0411342942680503 with: {'batch_size': 100, 'epochs': 20}\n"
+      "Best: 0.6614583333333334 using {'batch_size': 10, 'epochs': 20}\n",
+      "Means: 0.6614583333333334, Stdev: 0.054904085006010454 with: {'batch_size': 10, 'epochs': 20}\n",
+      "Means: 0.58203125, Stdev: 0.05749844314015525 with: {'batch_size': 20, 'epochs': 20}\n",
+      "Means: 0.5625, Stdev: 0.036225072248030094 with: {'batch_size': 40, 'epochs': 20}\n",
+      "Means: 0.5598958333333334, Stdev: 0.09223677473137935 with: {'batch_size': 60, 'epochs': 20}\n",
+      "Means: 0.6276041666666666, Stdev: 0.057084141189538994 with: {'batch_size': 80, 'epochs': 20}\n",
+      "Means: 0.5364583333333334, Stdev: 0.09764756905860768 with: {'batch_size': 100, 'epochs': 20}\n"
      ]
     }
    ],
    "source": [
     "import numpy\n",
+    "import pandas as pd\n",
     "from sklearn.model_selection import GridSearchCV\n",
     "from tensorflow.keras.models import Sequential\n",
     "from tensorflow.keras.layers import Dense\n",
@@ -370,7 +550,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 13,
+   "execution_count": 6,
    "metadata": {
     "colab": {
      "base_uri": "https://localhost:8080/",
@@ -385,21 +565,17 @@
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Best: 0.6966145833333334 using {'batch_size': 10, 'epochs': 200}\n",
-      "Means: 0.6393229166666666, Stdev: 0.038051143740110566 with: {'batch_size': 10, 'epochs': 20}\n",
-      "Means: 0.65234375, Stdev: 0.024079742199097563 with: {'batch_size': 10, 'epochs': 40}\n",
-      "Means: 0.6588541666666666, Stdev: 0.0048719497223619025 with: {'batch_size': 10, 'epochs': 60}\n",
-      "Means: 0.6966145833333334, Stdev: 0.01573313277811793 with: {'batch_size': 10, 'epochs': 200}\n",
-      "Means: 0.5690104166666666, Stdev: 0.07509307737133446 with: {'batch_size': 80, 'epochs': 20}\n",
-      "Means: 0.578125, Stdev: 0.0229993772560621 with: {'batch_size': 80, 'epochs': 40}\n",
-      "Means: 0.6354166666666666, Stdev: 0.06087848816438 with: {'batch_size': 80, 'epochs': 60}\n",
-      "Means: 0.6861979166666666, Stdev: 0.009743899444723805 with: {'batch_size': 80, 'epochs': 200}\n"
+      "Best: 0.7200520833333334 using {'batch_size': 10, 'epochs': 200}\n",
+      "Means: 0.6575520833333334, Stdev: 0.026748227323143407 with: {'batch_size': 10, 'epochs': 20}\n",
+      "Means: 0.65625, Stdev: 0.008438464451051902 with: {'batch_size': 10, 'epochs': 40}\n",
+      "Means: 0.6822916666666666, Stdev: 0.016366933710906945 with: {'batch_size': 10, 'epochs': 60}\n",
+      "Means: 0.7200520833333334, Stdev: 0.04101045767714485 with: {'batch_size': 10, 'epochs': 200}\n"
      ]
     }
    ],
    "source": [
     "# define the grid search parameters\n",
-    "param_grid = {'batch_size': [10,80],\n",
+    "param_grid = {'batch_size': [10],\n",
     "              'epochs': [20, 40, 60,200]}\n",
     "\n",
     "# Create Grid Search\n",
@@ -553,44 +729,17 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 12,
+   "execution_count": 10,
    "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/html": [
-       "\n",
-       "        Notebook configured with <a href=\"https://wandb.com\" target=\"_blank\">W&B</a>. You can <a href=\"https://app.wandb.ai/ds5/ds5-hyperparameter-tuning/runs/lfmy7wf5\" target=\"_blank\">open</a> the run page, or call <code>%%wandb</code>\n",
-       "        in a cell containing your training loop to display live results.  Learn more in our <a href=\"https://docs.wandb.com/docs/integrations/jupyter.html\" target=\"_blank\">docs</a>.\n",
-       "    "
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "text/plain": [
-       "W&B Run: https://app.wandb.ai/ds5/ds5-hyperparameter-tuning/runs/lfmy7wf5"
-      ]
-     },
-     "execution_count": 12,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
+   "outputs": [],
    "source": [
     "import wandb\n",
-    "from wandb.keras import WandbCallback\n",
-    "wandb.init(project=\"boston\", entity=\"ds6\")"
+    "from wandb.keras import WandbCallback"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 16,
+   "execution_count": 11,
    "metadata": {
     "colab": {
      "base_uri": "https://localhost:8080/",
@@ -602,137 +751,150 @@
    },
    "outputs": [
     {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "E0912 10:13:21.582159 4512605632 jupyter.py:96] Failed to query for notebook name, you can set it manually with the WANDB_NOTEBOOK_NAME environment variable\n"
-     ]
+     "data": {
+      "text/html": [
+       "\n",
+       "                Logging results to <a href=\"https://wandb.com\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n",
+       "                Project page: <a href=\"https://app.wandb.ai/lambda-ds7/boston\" target=\"_blank\">https://app.wandb.ai/lambda-ds7/boston</a><br/>\n",
+       "                Run page: <a href=\"https://app.wandb.ai/lambda-ds7/boston/runs/hpbikuqt\" target=\"_blank\">https://app.wandb.ai/lambda-ds7/boston/runs/hpbikuqt</a><br/>\n",
+       "            "
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
     },
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Train on 339 samples, validate on 167 samples\n",
+      "Train on 270 samples, validate on 134 samples\n",
       "Epoch 1/50\n",
-      "339/339 [==============================] - 0s 855us/sample - loss: 691.9624 - mean_squared_error: 691.9624 - val_loss: 355.0848 - val_mean_squared_error: 355.0848\n",
+      "270/270 [==============================] - 1s 2ms/sample - loss: 542.6229 - mse: 542.6229 - val_loss: 613.4104 - val_mse: 613.4103\n",
       "Epoch 2/50\n",
-      "339/339 [==============================] - 0s 74us/sample - loss: 660.2862 - mean_squared_error: 660.2861 - val_loss: 336.8931 - val_mean_squared_error: 336.8931\n",
+      "270/270 [==============================] - 0s 221us/sample - loss: 515.7794 - mse: 515.7794 - val_loss: 585.6940 - val_mse: 585.6940\n",
       "Epoch 3/50\n",
-      "339/339 [==============================] - 0s 112us/sample - loss: 626.1058 - mean_squared_error: 626.1058 - val_loss: 317.3721 - val_mean_squared_error: 317.3721\n",
+      "270/270 [==============================] - 0s 221us/sample - loss: 489.1560 - mse: 489.1560 - val_loss: 555.7399 - val_mse: 555.7399\n",
       "Epoch 4/50\n",
-      "339/339 [==============================] - 0s 83us/sample - loss: 587.1283 - mean_squared_error: 587.1283 - val_loss: 295.8682 - val_mean_squared_error: 295.8682\n",
+      "270/270 [==============================] - 0s 222us/sample - loss: 459.5435 - mse: 459.5435 - val_loss: 522.0359 - val_mse: 522.0359\n",
       "Epoch 5/50\n",
-      "339/339 [==============================] - 0s 76us/sample - loss: 537.5568 - mean_squared_error: 537.5569 - val_loss: 271.9893 - val_mean_squared_error: 271.9893\n",
+      "270/270 [==============================] - 0s 218us/sample - loss: 426.7799 - mse: 426.7799 - val_loss: 483.8164 - val_mse: 483.8164\n",
       "Epoch 6/50\n",
-      "339/339 [==============================] - 0s 80us/sample - loss: 473.9000 - mean_squared_error: 473.9000 - val_loss: 246.5327 - val_mean_squared_error: 246.5327\n",
+      "270/270 [==============================] - 0s 223us/sample - loss: 389.4474 - mse: 389.4474 - val_loss: 440.4657 - val_mse: 440.4657\n",
       "Epoch 7/50\n",
-      "339/339 [==============================] - 0s 79us/sample - loss: 399.0164 - mean_squared_error: 399.0164 - val_loss: 220.9570 - val_mean_squared_error: 220.9570\n",
+      "270/270 [==============================] - 0s 227us/sample - loss: 347.4014 - mse: 347.4015 - val_loss: 392.6660 - val_mse: 392.6660\n",
       "Epoch 8/50\n",
-      "339/339 [==============================] - 0s 80us/sample - loss: 315.3497 - mean_squared_error: 315.3497 - val_loss: 197.6462 - val_mean_squared_error: 197.6462\n",
+      "270/270 [==============================] - 0s 240us/sample - loss: 301.5478 - mse: 301.5478 - val_loss: 341.3498 - val_mse: 341.3498\n",
       "Epoch 9/50\n",
-      "339/339 [==============================] - 0s 103us/sample - loss: 230.0370 - mean_squared_error: 230.0370 - val_loss: 179.2751 - val_mean_squared_error: 179.2751\n",
+      "270/270 [==============================] - 0s 230us/sample - loss: 253.3802 - mse: 253.3802 - val_loss: 288.3960 - val_mse: 288.3960\n",
       "Epoch 10/50\n",
-      "339/339 [==============================] - 0s 77us/sample - loss: 154.7817 - mean_squared_error: 154.7817 - val_loss: 167.0551 - val_mean_squared_error: 167.0551\n",
+      "270/270 [==============================] - 0s 226us/sample - loss: 206.0767 - mse: 206.0767 - val_loss: 235.9911 - val_mse: 235.9911\n",
       "Epoch 11/50\n",
-      "339/339 [==============================] - 0s 77us/sample - loss: 105.3493 - mean_squared_error: 105.3493 - val_loss: 159.8331 - val_mean_squared_error: 159.8331\n",
+      "270/270 [==============================] - 0s 230us/sample - loss: 161.6535 - mse: 161.6535 - val_loss: 189.5775 - val_mse: 189.5775\n",
       "Epoch 12/50\n",
-      "339/339 [==============================] - 0s 75us/sample - loss: 77.4344 - mean_squared_error: 77.4344 - val_loss: 151.3967 - val_mean_squared_error: 151.3967\n",
+      "270/270 [==============================] - 0s 239us/sample - loss: 124.8994 - mse: 124.8994 - val_loss: 152.5591 - val_mse: 152.5591\n",
       "Epoch 13/50\n",
-      "339/339 [==============================] - 0s 77us/sample - loss: 63.7156 - mean_squared_error: 63.7156 - val_loss: 140.2394 - val_mean_squared_error: 140.2394\n",
+      "270/270 [==============================] - 0s 236us/sample - loss: 97.9244 - mse: 97.9244 - val_loss: 125.7973 - val_mse: 125.7973\n",
       "Epoch 14/50\n",
-      "339/339 [==============================] - 0s 78us/sample - loss: 48.5835 - mean_squared_error: 48.5835 - val_loss: 127.2387 - val_mean_squared_error: 127.2387\n",
+      "270/270 [==============================] - 0s 221us/sample - loss: 80.0973 - mse: 80.0973 - val_loss: 107.0594 - val_mse: 107.0594\n",
       "Epoch 15/50\n",
-      "339/339 [==============================] - 0s 87us/sample - loss: 37.8733 - mean_squared_error: 37.8733 - val_loss: 116.6476 - val_mean_squared_error: 116.6476\n",
+      "270/270 [==============================] - 0s 241us/sample - loss: 68.3282 - mse: 68.3282 - val_loss: 93.6705 - val_mse: 93.6705\n",
       "Epoch 16/50\n",
-      "339/339 [==============================] - 0s 153us/sample - loss: 30.1285 - mean_squared_error: 30.1285 - val_loss: 109.2158 - val_mean_squared_error: 109.2158\n",
+      "270/270 [==============================] - 0s 231us/sample - loss: 59.5750 - mse: 59.5750 - val_loss: 82.2315 - val_mse: 82.2315\n",
       "Epoch 17/50\n",
-      "339/339 [==============================] - 0s 72us/sample - loss: 24.8799 - mean_squared_error: 24.8799 - val_loss: 104.6462 - val_mean_squared_error: 104.6462\n",
+      "270/270 [==============================] - 0s 243us/sample - loss: 51.7544 - mse: 51.7544 - val_loss: 72.4432 - val_mse: 72.4432\n",
       "Epoch 18/50\n",
-      "339/339 [==============================] - 0s 102us/sample - loss: 21.6781 - mean_squared_error: 21.6781 - val_loss: 101.8188 - val_mean_squared_error: 101.8188\n",
+      "270/270 [==============================] - 0s 236us/sample - loss: 44.9942 - mse: 44.9942 - val_loss: 63.9945 - val_mse: 63.9945\n",
       "Epoch 19/50\n",
-      "339/339 [==============================] - 0s 74us/sample - loss: 19.5379 - mean_squared_error: 19.5379 - val_loss: 99.6642 - val_mean_squared_error: 99.6642\n",
+      "270/270 [==============================] - 0s 255us/sample - loss: 38.7144 - mse: 38.7144 - val_loss: 57.3586 - val_mse: 57.3586\n",
       "Epoch 20/50\n",
-      "339/339 [==============================] - 0s 79us/sample - loss: 17.8237 - mean_squared_error: 17.8237 - val_loss: 98.5439 - val_mean_squared_error: 98.5439\n",
+      "270/270 [==============================] - 0s 226us/sample - loss: 33.9071 - mse: 33.9071 - val_loss: 51.8623 - val_mse: 51.8623\n",
       "Epoch 21/50\n",
-      "339/339 [==============================] - 0s 75us/sample - loss: 16.7360 - mean_squared_error: 16.7360 - val_loss: 97.5971 - val_mean_squared_error: 97.5971\n",
+      "270/270 [==============================] - 0s 227us/sample - loss: 30.1965 - mse: 30.1965 - val_loss: 47.5522 - val_mse: 47.5522\n",
       "Epoch 22/50\n",
-      "339/339 [==============================] - 0s 73us/sample - loss: 15.6916 - mean_squared_error: 15.6916 - val_loss: 96.4185 - val_mean_squared_error: 96.4185\n",
+      "270/270 [==============================] - 0s 241us/sample - loss: 27.6267 - mse: 27.6267 - val_loss: 43.5997 - val_mse: 43.5997\n",
       "Epoch 23/50\n",
-      "339/339 [==============================] - 0s 74us/sample - loss: 14.9834 - mean_squared_error: 14.9834 - val_loss: 95.1004 - val_mean_squared_error: 95.1004\n",
+      "270/270 [==============================] - 0s 276us/sample - loss: 25.1637 - mse: 25.1637 - val_loss: 40.7985 - val_mse: 40.7985\n",
       "Epoch 24/50\n",
-      "339/339 [==============================] - 0s 83us/sample - loss: 14.3874 - mean_squared_error: 14.3874 - val_loss: 93.8591 - val_mean_squared_error: 93.8591\n",
+      "270/270 [==============================] - 0s 228us/sample - loss: 23.4687 - mse: 23.4687 - val_loss: 38.4080 - val_mse: 38.4080\n",
       "Epoch 25/50\n",
-      "339/339 [==============================] - 0s 78us/sample - loss: 13.8535 - mean_squared_error: 13.8535 - val_loss: 92.3135 - val_mean_squared_error: 92.3135\n",
+      "270/270 [==============================] - 0s 237us/sample - loss: 22.0964 - mse: 22.0964 - val_loss: 36.6157 - val_mse: 36.6157\n",
       "Epoch 26/50\n",
-      "339/339 [==============================] - 0s 80us/sample - loss: 13.4950 - mean_squared_error: 13.4950 - val_loss: 90.9254 - val_mean_squared_error: 90.9254\n",
+      "270/270 [==============================] - 0s 250us/sample - loss: 21.1338 - mse: 21.1338 - val_loss: 35.1560 - val_mse: 35.1560\n",
       "Epoch 27/50\n",
-      "339/339 [==============================] - 0s 70us/sample - loss: 13.0603 - mean_squared_error: 13.0603 - val_loss: 89.2812 - val_mean_squared_error: 89.2812\n",
+      "270/270 [==============================] - 0s 241us/sample - loss: 20.2961 - mse: 20.2961 - val_loss: 33.8126 - val_mse: 33.8126\n",
       "Epoch 28/50\n",
-      "339/339 [==============================] - 0s 74us/sample - loss: 12.7232 - mean_squared_error: 12.7232 - val_loss: 87.8430 - val_mean_squared_error: 87.8430\n",
+      "270/270 [==============================] - 0s 260us/sample - loss: 19.5153 - mse: 19.5153 - val_loss: 32.9215 - val_mse: 32.9215\n",
       "Epoch 29/50\n",
-      "339/339 [==============================] - 0s 74us/sample - loss: 12.3633 - mean_squared_error: 12.3633 - val_loss: 86.4976 - val_mean_squared_error: 86.4976\n",
+      "270/270 [==============================] - 0s 211us/sample - loss: 18.9627 - mse: 18.9627 - val_loss: 31.9189 - val_mse: 31.9189\n",
       "Epoch 30/50\n",
-      "339/339 [==============================] - 0s 72us/sample - loss: 12.0572 - mean_squared_error: 12.0572 - val_loss: 84.8616 - val_mean_squared_error: 84.8616\n",
+      "270/270 [==============================] - 0s 297us/sample - loss: 18.2966 - mse: 18.2966 - val_loss: 31.2597 - val_mse: 31.2597\n",
       "Epoch 31/50\n",
-      "339/339 [==============================] - 0s 69us/sample - loss: 11.7646 - mean_squared_error: 11.7646 - val_loss: 83.5297 - val_mean_squared_error: 83.5297\n",
+      "270/270 [==============================] - 0s 245us/sample - loss: 17.7610 - mse: 17.7610 - val_loss: 30.8385 - val_mse: 30.8385\n",
       "Epoch 32/50\n",
-      "339/339 [==============================] - 0s 68us/sample - loss: 11.5216 - mean_squared_error: 11.5216 - val_loss: 82.6964 - val_mean_squared_error: 82.6964\n",
+      "270/270 [==============================] - 0s 230us/sample - loss: 17.2614 - mse: 17.2614 - val_loss: 30.3309 - val_mse: 30.3309\n",
       "Epoch 33/50\n",
-      "339/339 [==============================] - 0s 74us/sample - loss: 11.2523 - mean_squared_error: 11.2523 - val_loss: 81.5098 - val_mean_squared_error: 81.5098\n",
+      "270/270 [==============================] - 0s 226us/sample - loss: 16.8217 - mse: 16.8217 - val_loss: 29.8041 - val_mse: 29.8041\n",
       "Epoch 34/50\n",
-      "339/339 [==============================] - 0s 73us/sample - loss: 11.0146 - mean_squared_error: 11.0146 - val_loss: 80.1996 - val_mean_squared_error: 80.1996\n",
+      "270/270 [==============================] - 0s 234us/sample - loss: 16.3989 - mse: 16.3989 - val_loss: 29.2053 - val_mse: 29.2053\n",
       "Epoch 35/50\n",
-      "339/339 [==============================] - 0s 70us/sample - loss: 10.7820 - mean_squared_error: 10.7820 - val_loss: 78.9657 - val_mean_squared_error: 78.9657\n",
+      "270/270 [==============================] - 0s 254us/sample - loss: 15.9783 - mse: 15.9783 - val_loss: 28.3672 - val_mse: 28.3672\n",
       "Epoch 36/50\n",
-      "339/339 [==============================] - 0s 69us/sample - loss: 10.6086 - mean_squared_error: 10.6086 - val_loss: 77.8950 - val_mean_squared_error: 77.8950\n",
+      "270/270 [==============================] - 0s 254us/sample - loss: 15.6311 - mse: 15.6311 - val_loss: 27.6270 - val_mse: 27.6270\n",
       "Epoch 37/50\n",
-      "339/339 [==============================] - 0s 72us/sample - loss: 10.3683 - mean_squared_error: 10.3683 - val_loss: 77.2041 - val_mean_squared_error: 77.2041\n",
+      "270/270 [==============================] - 0s 233us/sample - loss: 15.2522 - mse: 15.2522 - val_loss: 27.1081 - val_mse: 27.1081\n",
       "Epoch 38/50\n",
-      "339/339 [==============================] - 0s 69us/sample - loss: 10.1993 - mean_squared_error: 10.1993 - val_loss: 76.1137 - val_mean_squared_error: 76.1137\n",
+      "270/270 [==============================] - 0s 217us/sample - loss: 14.8507 - mse: 14.8507 - val_loss: 26.7015 - val_mse: 26.7015\n",
       "Epoch 39/50\n",
-      "339/339 [==============================] - 0s 71us/sample - loss: 9.9866 - mean_squared_error: 9.9866 - val_loss: 75.1318 - val_mean_squared_error: 75.1318\n",
+      "270/270 [==============================] - 0s 217us/sample - loss: 14.5000 - mse: 14.5000 - val_loss: 26.2731 - val_mse: 26.2731\n",
       "Epoch 40/50\n",
-      "339/339 [==============================] - 0s 69us/sample - loss: 9.8172 - mean_squared_error: 9.8172 - val_loss: 74.2301 - val_mean_squared_error: 74.2301\n",
+      "270/270 [==============================] - 0s 215us/sample - loss: 14.2169 - mse: 14.2169 - val_loss: 25.8835 - val_mse: 25.8835\n",
       "Epoch 41/50\n",
-      "339/339 [==============================] - 0s 68us/sample - loss: 9.6379 - mean_squared_error: 9.6379 - val_loss: 73.3440 - val_mean_squared_error: 73.3439\n",
+      "270/270 [==============================] - 0s 239us/sample - loss: 13.8908 - mse: 13.8908 - val_loss: 25.3702 - val_mse: 25.3702\n",
       "Epoch 42/50\n",
-      "339/339 [==============================] - 0s 70us/sample - loss: 9.4828 - mean_squared_error: 9.4828 - val_loss: 72.4156 - val_mean_squared_error: 72.4156\n",
+      "270/270 [==============================] - 0s 226us/sample - loss: 13.6325 - mse: 13.6325 - val_loss: 24.9003 - val_mse: 24.9003\n",
       "Epoch 43/50\n",
-      "339/339 [==============================] - 0s 72us/sample - loss: 9.3129 - mean_squared_error: 9.3129 - val_loss: 71.6323 - val_mean_squared_error: 71.6323\n",
+      "270/270 [==============================] - 0s 248us/sample - loss: 13.3238 - mse: 13.3238 - val_loss: 24.5700 - val_mse: 24.5700\n",
       "Epoch 44/50\n",
-      "339/339 [==============================] - 0s 79us/sample - loss: 9.1870 - mean_squared_error: 9.1870 - val_loss: 70.7300 - val_mean_squared_error: 70.7300\n",
+      "270/270 [==============================] - 0s 245us/sample - loss: 13.0540 - mse: 13.0540 - val_loss: 24.2374 - val_mse: 24.2374\n",
       "Epoch 45/50\n",
-      "339/339 [==============================] - 0s 77us/sample - loss: 9.0110 - mean_squared_error: 9.0110 - val_loss: 69.7804 - val_mean_squared_error: 69.7804\n",
+      "270/270 [==============================] - 0s 227us/sample - loss: 12.8386 - mse: 12.8386 - val_loss: 24.0359 - val_mse: 24.0359\n",
       "Epoch 46/50\n",
-      "339/339 [==============================] - 0s 74us/sample - loss: 8.8892 - mean_squared_error: 8.8892 - val_loss: 69.0510 - val_mean_squared_error: 69.0510\n",
+      "270/270 [==============================] - 0s 215us/sample - loss: 12.5657 - mse: 12.5657 - val_loss: 23.6745 - val_mse: 23.6745\n",
       "Epoch 47/50\n",
-      "339/339 [==============================] - 0s 76us/sample - loss: 8.7423 - mean_squared_error: 8.7423 - val_loss: 67.9057 - val_mean_squared_error: 67.9057\n",
+      "270/270 [==============================] - 0s 205us/sample - loss: 12.3262 - mse: 12.3262 - val_loss: 23.1574 - val_mse: 23.1574\n",
       "Epoch 48/50\n",
-      "339/339 [==============================] - 0s 71us/sample - loss: 8.6113 - mean_squared_error: 8.6113 - val_loss: 67.0401 - val_mean_squared_error: 67.0401\n",
+      "270/270 [==============================] - 0s 240us/sample - loss: 12.0710 - mse: 12.0710 - val_loss: 22.8529 - val_mse: 22.8529\n",
       "Epoch 49/50\n",
-      "339/339 [==============================] - 0s 75us/sample - loss: 8.4658 - mean_squared_error: 8.4658 - val_loss: 66.3409 - val_mean_squared_error: 66.3409\n",
+      "270/270 [==============================] - 0s 209us/sample - loss: 11.8346 - mse: 11.8346 - val_loss: 22.6784 - val_mse: 22.6784\n",
       "Epoch 50/50\n",
-      "339/339 [==============================] - 0s 74us/sample - loss: 8.3440 - mean_squared_error: 8.3440 - val_loss: 65.5890 - val_mean_squared_error: 65.5890\n"
+      "270/270 [==============================] - 0s 220us/sample - loss: 11.6244 - mse: 11.6244 - val_loss: 22.4169 - val_mse: 22.4169\n"
      ]
     },
     {
      "data": {
       "text/plain": [
-       "<tensorflow.python.keras.callbacks.History at 0x1a35c50d68>"
+       "<tensorflow.python.keras.callbacks.History at 0x7f7db46f2278>"
       ]
      },
-     "execution_count": 16,
+     "execution_count": 11,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
+    "wandb.init(project=\"boston\", entity=\"lambda-ds7\")\n",
+    "\n",
+    "X = x_train\n",
+    "y = y_train\n",
+    "\n",
     "# Important Hyperparameters\n",
     "inputs = X.shape[1]\n",
     "wandb.config.epochs = 50\n",
     "wandb.config.batch_size = 10\n",
     "\n",
-    "\n",
     "# Create Model\n",
     "model = Sequential()\n",
     "model.add(Dense(64, activation='relu', input_shape=(inputs,)))\n",
@@ -767,6 +929,33 @@
     "# Hyperparameters with RandomSearchCV (Learn)"
    ]
   },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "sweep_config = {\n",
+    "    'method': 'random',\n",
+    "    'parameters': {\n",
+    "        'learning_rate': {'distribution': 'normal'},\n",
+    "        'epochs': {'distribution': 'uniform',\n",
+    "                    'min': 100,\n",
+    "                    'max': 1000},\n",
+    "        'batch_size': {'distribution': 'uniform',\n",
+    "            'min': 10,\n",
+    "            'max': 400}\n",
+    "    }\n",
+    "}"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
   {
    "cell_type": "markdown",
    "metadata": {},
